---
import TableOfContentsHeading from '../components/TOCHeading.astro';
import type { MarkdownHeading } from 'astro';
import Markdoc from "@markdoc/markdoc";

export interface TocItem extends MarkdownHeading {
	subheadings: TocItem[];
}

export function diveChildren(item: TocItem, depth: number): TocItem[] {
	if (depth === 1) {
		return item.subheadings;
	} else {
		// e.g., 2
		return diveChildren(item.subheadings[item.subheadings.length - 1], depth - 1);
	}
}

export function generateToc(headings: MarkdownHeading[], title = 'TOC') {
	const overview = { depth: 2, slug: 'overview', text: title };
	//headings = [overview, ...headings.filter(({ depth }) => depth > 1 && depth < 4)];
	headings = [ ...headings.filter(({ depth }) => depth > 1 && depth < 4)];
	const toc: Array<TocItem> = [];
	
	

	for (const heading of headings) {
		if (toc.length === 0) {
			toc.push({
				...heading,
				subheadings: [],
			});
		} else {
			const lastItemInToc = toc[toc.length - 1];
			if (heading.depth < lastItemInToc.depth) {
				throw new Error(`Orphan heading found: ${heading.text}.`);
			}
			if (heading.depth === lastItemInToc.depth) {
				// same depth
				toc.push({
					...heading,
					subheadings: [],
				});
			} else {
				// higher depth
				// push into subheadings, or subheadings' subheadings alike
				const gap = heading.depth - lastItemInToc.depth;
				const target = diveChildren(lastItemInToc, gap);
				target.push({
					...heading,
					subheadings: [],
				});
			}
		}
	}
	return toc;
} 

function generateToc2(headings) {
  const toc = [];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 1) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}

const { headings } = Astro.props;

const toc= generateToc(headings);

---



<ol class="toc">
	{toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
</ol>





